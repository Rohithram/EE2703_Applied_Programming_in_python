% use this command to make the pdf
% jupyter nbconvert --to pdf HW0.ipynb --template clean_report.tplx
((*- extends 'article.tplx' -*))

%===============================================================================
% Document class
%===============================================================================

((* block docclass *))
\documentclass[9pt,onecolumn,aps,pra]{revtex4-1}
((* endblock docclass *))

%===============================================================================
% Packages
%===============================================================================

((* block packages *))
\usepackage[T1]{fontenc}
\usepackage{graphicx}
% We will generate all images so they have a width \maxwidth. This means
% that they will get their normal width if they fit onto the page, but
% are scaled down if they would overflow the margins.
\makeatletter
\def\maxwidth{\ifdim\Gin@nat@width>\linewidth\linewidth
\else\Gin@nat@width\fi}
\makeatother
\let\Oldincludegraphics\includegraphics
% Set max figure width to be 80% of text width, for now hardcoded.
\renewcommand{\includegraphics}[1]{\Oldincludegraphics[width=.8\maxwidth]{#1}}
% Ensure that by default, figures have no caption (until we provide a
% proper Figure object with a Caption API and a way to capture that
% in the conversion process - todo).
\usepackage{caption}
\DeclareCaptionLabelFormat{nolabel}{}
\captionsetup{labelformat=nolabel}

\usepackage{adjustbox} % Used to constrain images to a maximum size
\usepackage{xcolor} % Allow colors to be defined
\usepackage{enumerate} % Needed for markdown enumerations to work
\usepackage{geometry} % Used to adjust the document margins
\usepackage{amsmath} % Equations
\usepackage{amssymb} % Equations
\usepackage{textcomp} % defines textquotesingle
% Hack from http://tex.stackexchange.com/a/47451/13684:
\AtBeginDocument{%
    \def\PYZsq{\textquotesingle}% Upright quotes in Pygmentized code
}
\usepackage{upquote} % Upright quotes for verbatim code
\usepackage{eurosym} % defines \euro
\usepackage[mathletters]{ucs} % Extended unicode (utf-8) support
\usepackage[utf8x]{inputenc} % Allow utf-8 characters in the tex document
\usepackage{fancyvrb} % verbatim replacement that allows latex
\usepackage{grffile} % extends the file name processing of package graphics
                     % to support a larger range
% The hyperref package gives us a pdf with properly built
% internal navigation ('pdf bookmarks' for the table of contents,
% internal cross-reference links, web links for URLs, etc.)
\usepackage{hyperref}
\usepackage{booktabs}  % table support for pandoc > 1.12.2
\usepackage[inline]{enumitem} % IRkernel/repr support (it uses the enumerate* environment)
\usepackage[normalem]{ulem} % ulem is needed to support strikethroughs (\sout)
                            % normalem makes italics be italics, not underlines
\usepackage{braket}
((* endblock packages *))

%===============================================================================
% Title Page
%===============================================================================

((* block title -*))
((*- endblock title *))

((* block author -*))
((* endblock author *))

((* block maketitle *))

((*- if nb.metadata.get("latex_metadata", {}).get("title", ""): -*))
\title{((( nb.metadata["latex_metadata"]["title"] )))}
((*- else -*))
\title{((( resources.metadata.name | ascii_only | escape_latex )))}
((*- endif *))

((*- if nb.metadata.get("latex_metadata", {}).get("author", ""): -*))
\author{((( nb.metadata["latex_metadata"]["author"] )))}
((*- else -*))
\author{Rohithram R \\ EE16B031}
((*- endif *))

((*- if nb.metadata.get("latex_metadata", {}).get("affiliation", ""): -*))
\affiliation{((( nb.metadata["latex_metadata"]["affiliation"] )))}
((*- endif *))

\date{\today}
\maketitle

((* endblock maketitle *))

%===============================================================================
% Input
%===============================================================================

((* block input_group *))
	((* if cell['metadata'].get("include",1)==1 *))
		((( super() )))
	((* endif *))
((* endblock input_group *))

((* block input scoped*))
	((* set ns = namespace(lines=cell.source.split("\n"), out='') *))
	((* for line in ns.lines *))
		((* if not line.startswith("%%")*))
			((* set ns.out=ns.out+"\n"+line *))
		((* endif *))
	((* endfor *))
	(((ns.out.strip() | highlight_code(strip_verbatim=False, metadata=cell.metadata))))
	
((* endblock input *))

((* block markdowncell *))
	((* if cell['metadata'].get("include",1)==1 *))
		((( super() )))
	((* endif *))
((* endblock markdowncell *))
